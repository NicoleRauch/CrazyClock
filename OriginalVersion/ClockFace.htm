<!-- Class documentation generated by CPPDOC -->
<HTML>
<HEAD>
<TITLE>Class Documentation for C++-Class:  ClockFace</TITLE>
</HEAD>
<BODY>
<H1>Class ClockFace</H1>
<H2>Source</H2><P><A HREF="file:///E:\arbeit\PROGR\_Crazy\mytime.h">E:\arbeit\PROGR\_Crazy\mytime.h</A>, <A HREF="file:///E:\arbeit\PROGR\_Crazy\mytime.cpp">E:\arbeit\PROGR\_Crazy\mytime.cpp</A></P><HR>
<H2>Inheritance</H2>
<P><PRE>
 class ClockFace 
</PRE></P>
<HR>
<H2>Class Description</H2><P>
No description available.
</P><HR>
<H2><A NAME="Class Interface">Class Interface</A></H2><P>
<PRE>
    RowOfDots DotRow[6];
    ARCPARAMS ArcParams;  // the same for all rows
    LONG Delta;
    DATETIME AlarmTime;     // holds the alarm time
    // flags that determine the clock's appearance:
    BOOL fDotsEnlarged;
    BOOL fSeconds;			// TRUE : displays seconds
    BOOL fFrameIsVisible;	// TRUE : Title Bar etc. are visible
    BOOL fReadNumbers;	// not to be stored in the .INI file!
    BOOL fSound;	// indicates whether sound is played via MMPM
    BOOL fSoundPossible; // indicates whether MMPM is active at all
    BOOL fShow24h;	// TRUE : time is displayed in 24-h-mode
    BOOL fIconFrameIsVisible;// TRUE : frame is drawn around the min. prog.
    BOOL fAlarmOn;   // indicates whether alarm has been activated
    BOOL fAlarmWnd;  // i. w. alarm should open a window
    BOOL fChime;   // indicates whether chime has been activated
</PRE>
<B>public:</B>
<PRE>
    ClockFace();
    VOID SetDelta( LONG d ) { Delta = d; }
    VOID SetTime();
    VOID CalcMinWindowSize( INT *Width, INT *Height );
    VOID PaintBackground( HWND hwnd, HPS hps );
    VOID WorkPaint( HPS hps, BOOL FirstPaint );
    LONG PositionToRead( POINTL ptl );
    BOOL CheckAlarm();
    BOOL CheckChime();
    VOID SetMinTrackSize( POINTL &amp;ptl );
    BOOL RetrieveNumberToRead( LONG *NrToRead );
    // set the clock flags:
    VOID SetfDotsEnlarged      ( BOOL v ) { fDotsEnlarged = v; }
    VOID SetfSeconds           ( BOOL v ) { fSeconds = v; }
    VOID SetfFrameIsVisible    ( BOOL v ) { fFrameIsVisible = v; }
    VOID SetfReadNumbers       ( BOOL v ) { fReadNumbers = v; }
    VOID SetfSound             ( BOOL v ) { fSound = fSoundPossible &amp;&amp; v; }
    VOID SetfShow24h           ( BOOL v ) { fShow24h = v; }
    VOID SetfIconFrameIsVisible( BOOL v ) { fIconFrameIsVisible = v; }
    VOID SetfAlarmOn           ( BOOL v ) { fAlarmOn = v; }
    VOID SetfAlarmWnd          ( BOOL v ) { fAlarmWnd = v; }
    VOID SetfChime             ( BOOL v ) { fChime = v; }
    // this one is only called at create time:
    VOID ActivateMMPM          () { fSound = fSoundPossible = TRUE; }
    // query the clock flags:
    BOOL QueryfDotsEnlarged()       { return fDotsEnlarged; }
    BOOL QueryfSeconds()            { return fSeconds; }
    BOOL QueryfFrameIsVisible()     { return fFrameIsVisible; }
    BOOL QueryfReadNumbers()        { return fReadNumbers; }
    BOOL QueryfSound()              { return fSoundPossible &amp;&amp; fSound; }
    BOOL QueryfSoundPossible()      { return fSoundPossible; }
    BOOL QueryfShow24h()            { return fShow24h; }
    BOOL QueryfIconFrameIsVisible() { return fIconFrameIsVisible; }
    BOOL QueryfAlarmOn()            { return fAlarmOn; }
    BOOL QueryfAlarmWnd()           { return fAlarmWnd; }
    BOOL QueryfChime()              { return fChime; }
    // toggle the clock flags:
    VOID TogglefSeconds()            { fSeconds = !fSeconds; }
    VOID TogglefReadNumbers()        { fReadNumbers = !fReadNumbers; }
    VOID TogglefShow24h()            { fShow24h = !fShow24h; }
    VOID TogglefChime()              { fChime = !fChime; }
    // include security check:
    VOID TogglefSound()              { fSound = fSoundPossible &amp;&amp; !fSound; }
    VOID TogglefDotsEnlarged()       { fDotsEnlarged = !fDotsEnlarged; }
    VOID TogglefFrameIsVisible()     { fFrameIsVisible = !fFrameIsVisible; }
    VOID TogglefIconFrameIsVisible() { fIconFrameIsVisible =
					   !fIconFrameIsVisible; }
    VOID TogglefAlarmOn()            { fAlarmOn = !fAlarmOn; }
    VOID TogglefAlarmWnd()           { fAlarmWnd = !fAlarmWnd; }
    // Alarm time stuff:
    VOID SetAlarmTimeHours  ( UCHAR uch ) { AlarmTime.hours   = uch; }
    VOID SetAlarmTimeMinutes( UCHAR uch ) { AlarmTime.minutes = uch; }
    VOID SetAlarmTimeSeconds( UCHAR uch ) { AlarmTime.seconds = uch; }
    UCHAR QueryAlarmTimeHours  () { return AlarmTime.hours;   }
    UCHAR QueryAlarmTimeMinutes() { return AlarmTime.minutes; }
    UCHAR QueryAlarmTimeSeconds() { return AlarmTime.seconds; }
</PRE>
</P><HR>
<H2>Description of Functions (Members and Others)</H2><P>
No details about members available. </P><HR>
<P>CPPDOC - (C) by Bernhard Bablok, 1996</P>
<P>Please send comments, suggestions, bug-reports to:
<A HREF="mailto:ua302cb@sunmail.lrz-muenchen.de">Bernhard Bablok</A></P>
</BODY>
</HTML>
